/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.templetower;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

import it.unibo.templetower.controller.GameDataManagerImpl;
import it.unibo.templetower.model.*;
import it.unibo.templetower.util.FloorPrinterUtil;


class AppTest {

    @Test 
    void testAppHasAGreeting() throws ClassNotFoundException {
        assertNotNull(Class.forName("javafx.scene.Scene"));
    }

    @Test
    void testVerifyPath() {
        GameDataManagerImpl gameDataManager = new GameDataManagerImpl();
        String testPath = "tower/floors/floors-data.json";
        assertTrue(gameDataManager.verifyPath(testPath, 20));
    }

    /**
     * Tests the loading and printing of floor data from the game configuration.
     * This test verifies that:
     * 1. The GameDataManager can successfully load floor data
     * 2. The loaded data contains at least one floor
     * 3. Prints the content of each floor to the console for verification
     */
    @Test
    void testLoadAndPrintFloorData() {
        GameDataManagerImpl gameDataManager = new GameDataManagerImpl();
        String testPath = "tower/floors/floors-data.json";
        
        // Load the game data
        gameDataManager.loadGameData(testPath);
        
        // Get the floors list
        List<FloorData> floors = gameDataManager.getFloors();
        
        // Verify that floors were loaded
        assertFalse(floors.isEmpty(), "Floor list should not be empty");
        
        // Print floor data
        FloorPrinterUtil.printFloorDetails(floors);
    }

    @Test
    void testSpawnManager() {
        int level = 1;
        
        // Load game data
        GameDataManagerImpl gameDataManager = new GameDataManagerImpl();
        String testPath = "tower/floors/floors-data.json";
        gameDataManager.loadGameData(testPath);
        var floors = gameDataManager.getFloors();
        
        // Instantiate SpawnManagerImpl with loaded floor data
        SpawnManagerImpl spawnManager = new SpawnManagerImpl(floors);
        var generatedFloor = spawnManager.spawnFloor(level);
        
        // Print generated floor details
        System.out.println("\n=== Dettagli del Piano Generato ===");
        System.out.println("Nome Piano: " + generatedFloor.floorName());
        System.out.println("Sprite: " + generatedFloor.spritePath());
        System.out.println("VisibilitÃ : " + generatedFloor.visibility());
        System.out.println("\nStanze:");
        generatedFloor.rooms().forEach(room -> {
            System.out.println("- Stanza " + room.getId() + ": " 
                + (room.getBehavior() == null ? "Vuota" : room.getBehavior().getClass().getSimpleName()));
            if (room.getBehavior() instanceof EnemyRoom) {
                EnemyRoom er = (EnemyRoom) room.getBehavior();
                System.out.println("  [EnemyRoom] Nome enemy: " + er.getName());
                System.out.println("  [EnemyRoom] Danno Attacco: " + er.getAttackDamage());
                System.out.println("  [EnemyRoom] Punti Vita: " + er.getLifePoints());
            } else if (room.getBehavior() instanceof Trap) {
                Trap trap = (Trap) room.getBehavior();
                System.out.println("  [Trap] Danno: " + trap.getDamage());
            }
        });
        System.out.println("=== Fine Dettagli ===\n");
    }

}

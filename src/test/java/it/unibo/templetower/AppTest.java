/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.templetower;

import java.util.logging.Logger;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import it.unibo.templetower.controller.GameDataManagerImpl;
import it.unibo.templetower.model.EnemyRoom;
import it.unibo.templetower.model.SpawnManagerImpl;
import it.unibo.templetower.model.Trap;
import it.unibo.templetower.model.Tower;
import it.unibo.templetower.util.FloorPrinterUtil;

class AppTest {
    private static final Logger LOGGER = Logger.getLogger(AppTest.class.getName());

    @Test 
    void testAppHasAGreeting() throws ClassNotFoundException {
        assertNotNull(Class.forName("javafx.scene.Scene"));
    }

    @Test
    void testVerifyPath() {
        final GameDataManagerImpl gameDataManager = GameDataManagerImpl.getInstance();
        final String testPath = "tower/tower.json";
        gameDataManager.loadGameDataFromTower(testPath);
        final Tower towerData = gameDataManager.getTower();
        assertNotNull(towerData);
        assertEquals("Temple Tower", towerData.name());
        assertFalse(towerData.floors().isEmpty(), "Floor list should not be empty");
    }

    /**
     * Tests the loading and printing of tower floor data.
     */
    @Test
    void testLoadAndPrintFloorData() {
        final GameDataManagerImpl gameDataManager = GameDataManagerImpl.getInstance();
        final String testTowerPath = "tower/tower.json";
        gameDataManager.loadGameDataFromTower(testTowerPath);
        final Tower towerData = gameDataManager.getTower();
        assertFalse(towerData.floors().isEmpty(), "Floor list should not be empty");
        // Print floor data
        FloorPrinterUtil.printFloorDetails(towerData.floors());
    }

    @Test
    void testSpawnManager() {
        final int level = 1;
        final GameDataManagerImpl gameDataManager = GameDataManagerImpl.getInstance();
        final String testTowerPath = "tower/tower.json";
        gameDataManager.loadGameDataFromTower(testTowerPath);
        final Tower towerData = gameDataManager.getTower();
        // Instantiate SpawnManagerImpl with the tower data
        final SpawnManagerImpl spawnManager = new SpawnManagerImpl(towerData);
        final var generatedFloor = spawnManager.spawnFloor(level);
        // Print generated floor details
        LOGGER.info("\n=== Dettagli del Piano Generato ===");
        LOGGER.info("Nome Piano: " + generatedFloor.floorName());
        LOGGER.info("Sprite: " + generatedFloor.spritePath());
        LOGGER.info("VisibilitÃ : " + generatedFloor.visibility());
        LOGGER.info("\nStanze:");
        generatedFloor.rooms().forEach(room -> {
            LOGGER.info("- Stanza " + room.getId() + ": " 
                + (room.getBehavior() == null ? "Vuota" : room.getBehavior().getClass().getSimpleName()));
            if (room.getBehavior() instanceof EnemyRoom) {
                final EnemyRoom er = (EnemyRoom) room.getBehavior();
                LOGGER.info("  [EnemyRoom] Nome enemy: " + er.getName());
                LOGGER.info("  [EnemyRoom] Danno Attacco: " + er.getAttackDamage());
                LOGGER.info("  [EnemyRoom] Punti Vita: " + er.getLifePoints());
            } else if (room.getBehavior() instanceof Trap) {
                final Trap trap = (Trap) room.getBehavior();
                LOGGER.info("  [Trap] Danno: " + trap.getDamage());
            }
        });
        LOGGER.info("=== Fine Dettagli ===\n");
    }
}
